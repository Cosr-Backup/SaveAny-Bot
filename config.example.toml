# 创建文件时，若需要保留中文注释，请务必确保本文件编码为 UTF-8 ，否则会无法读取。
# When creating this file, ensure UTF-8 encoding to preserve Chinese comments.
# 更详细的配置请在 https://sabot.unv.app/deployment/configuration 查看
# For detailed configuration, visit: https://sabot.unv.app/deployment/configuration

workers = 4    # 同时下载文件数 / Concurrent download workers
retry = 3      # 下载失败重试次数 / Download retry count on failure
threads = 4    # 单个任务下载使用的最大线程数 / Max threads per download task
stream = false # 使用流式传输模式, 建议仅在硬盘空间十分有限时使用 / Enable streaming mode (use only when disk space is very limited)

# 缓存配置 / Cache Configuration
[cache]
# Ristretto 内存缓存设置 (Redis 禁用时使用) / Ristretto in-memory cache settings (used when Redis is disabled)
ttl = 86400          # 缓存过期时间 (秒) / Cache TTL in seconds
num_counters = 100000 # 缓存计数器数量 / Number of cache counters
max_cost = 1000000   # 最大缓存成本 / Maximum cache cost

  # Redis 分布式缓存配置，支持 Redis 6.0+ ACL 用户认证 / Redis distributed cache with Redis 6.0+ ACL user support
  [cache.redis]
  enable = false              # 启用 Redis 缓存 (false = 使用 Ristretto 内存缓存) / Enable Redis cache (false = use Ristretto in-memory cache)
  
  # 连接设置 / Connection Settings
  host = "localhost"          # Redis 服务器地址 / Redis server host
  port = 6379                 # Redis 服务器端口 / Redis server port
  password = ""               # Redis 密码 / Redis password
  redis_user = ""             # Redis 6.0+ ACL 用户名，支持云服务认证 / Redis 6.0+ ACL username for cloud services
  db = 0                      # Redis 数据库编号 (0-15) / Redis database number (0-15)
  
  # 连接池设置 / Connection Pool Settings
  max_retries = 3             # 最大重试次数 / Maximum retry attempts
  min_idle_conns = 5          # 最小空闲连接数 / Minimum idle connections
  max_idle_conns = 10         # 最大空闲连接数 / Maximum idle connections
  max_active_conns = 100      # 最大活跃连接数 / Maximum active connections
  
  # 超时设置 (秒) / Timeout Settings (seconds)
  connect_timeout = 10        # 连接超时 / Connection timeout
  read_timeout = 5            # 读取超时 / Read timeout
  write_timeout = 5           # 写入超时 / Write timeout
  
  # Redis 6.0+ ACL 用户场景示例 / Redis 6.0+ ACL User Examples:
  # 云服务 / Cloud Services:
  # - AWS ElastiCache: redis_user = "your-acl-username"
  # - Azure Cache for Redis: redis_user = "your-acl-username"  
  # - Google Cloud Memorystore: redis_user = "your-acl-username"
  # 自建 Redis 6.0+: redis_user = "app-user"
  # Self-hosted Redis 6.0+: redis_user = "app-user"

[telegram]
# Bot Token
# 更换 Bot Token 后请删除会话数据库文件 (默认路径为 data/session.db )
token = ""
# Telegram API 配置, 若不配置也可运行, 将使用默认的 API ID 和 API HASH
# 推荐使用自己的 API ID 和 API HASH (https://my.telegram.org)
# app_id = 1025907
# app_hash = "452b0359b988148995f22ff0f4229750"
[telegram.proxy]
# 启用代理连接 telegram, 只支持 socks5
enable = false
url = "socks5://127.0.0.1:7890"

# 存储列表
[[storages]]
# 标识名, 需要唯一
name = "本机1"
# 存储类型, 目前可用: local, alist, webdav, minio, telegram
type = "local"
# 启用存储
enable = true
# 文件保存根路径
base_path = "./downloads"

[[storages]]
name = "MyWebdav"
type = "webdav"
enable = false
base_path = '/path/telegram'
url = 'https://example.com/dav'
username = 'username'
password = 'password'

# 用户列表
[[users]]
# telegram user id
id = 114514
# 存储过滤列表, 元素为存储标识名.
# 将该列表留空并开启黑名单过滤模式以允许使用所有存储，此处示例为黑名单模式，用户 114514 可使用所有存储
storages = []
# 使用列表过滤黑名单模式，反之则为白名单，白名单请在列表中指定可用的存储.
blacklist = true

[[users]]
id = 123456
storages = ["本机1"]
blacklist = false  # 使用白名单模式，此时，用户 123456 仅可使用标识名为 '本地1' 的存储